import{_ as n,c as a,b as t,o as p}from"./app-DiMD2xtl.js";const e={};function o(l,s){return p(),a("div",null,s[0]||(s[0]=[t(`<h3 id="apply-sort" tabindex="-1"><a class="header-anchor" href="#apply-sort"><span>Apply Sort</span></a></h3><h4 id="apply-basic-sorting" tabindex="-1"><a class="header-anchor" href="#apply-basic-sorting"><span>Apply Basic Sorting</span></a></h4><p>Queries can accept a sort parameter that allows sorting on one or multiple fields with the following syntax&#39;s:</p><p><code>GET /api/:pluralApiId?sort=value</code> to sort on 1 field</p><p><code>GET /api/:pluralApiId?sort[0]=value1&amp;sort[1]=value2</code> to sort on multiple fields (e.g. on 2 fields)</p><p>The sorting order can be defined as:</p><ul><li><code>:asc</code> for ascending order (default order, can be omitted)</li><li><code>:desc</code> for descending order.</li></ul><p><em>Usage Examples</em></p><p>Sort using 2 fields</p><p><code>GET /api/articles?sort[0]=title&amp;sort[1]=slug</code></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> qs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;qs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> query <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">sort</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;slug&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">encodeValuesOnly</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// prettify URL</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">await</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/api/articles?</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>query<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Sort using 2 fields and set the order</p><p><code>GET /api/articles?sort[0]=title%3Aasc&amp;sort[1]=slug%3Adesc</code></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> qs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;qs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> query <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">sort</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;title:asc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;slug:desc&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">encodeValuesOnly</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// prettify URL</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">await</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/api/articles?</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>query<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="apply-sort-by-relationships" tabindex="-1"><a class="header-anchor" href="#apply-sort-by-relationships"><span>Apply Sort by Relationships</span></a></h4><p>All the usages of basic sorting are applicable. Use dot(.) notation to apply relationship in the following format.</p><p><code>?sort=[relationship name].[relationship column]:[sort direction]</code></p><p><em>Usage Examples</em></p><p>The query below sorts posts by their tag name in ascending order (default sort direction). Direction is not mandatory when sorted by ascending order.</p><p><code>GET /api/posts?sort=tags.name:asc</code></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> qs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;qs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> query <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">sort</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;tags.name:asc&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">encodeValuesOnly</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// prettify URL</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">await</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/api/posts?</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>query<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Sorting by nested relationships is not supported by the package as of now.</p></div>`,22)]))}const c=n(e,[["render",o],["__file","sort.html.vue"]]),r=JSON.parse('{"path":"/js-examples/sort.html","title":"Sorting","lang":"en-US","frontmatter":{"title":"Sorting","description":"Learn how to apply sorting to your API requests using Laravel Purity.","prev":{"text":"Available Methods","link":"/js-examples/available-methods"},"next":{"text":"Rename Fields","link":"/advanced/rename"}},"headers":[{"level":3,"title":"Apply Sort","slug":"apply-sort","link":"#apply-sort","children":[]}],"git":{"updatedTime":1718412827000,"contributors":[{"name":"Abbas mkhzomi","email":"amkhzomi@gmail.com","commits":3}]},"filePathRelative":"js-examples/sort.md"}');export{c as comp,r as data};
