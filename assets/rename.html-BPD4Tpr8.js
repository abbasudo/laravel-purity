import{_ as n,c as a,b as e,o as t}from"./app-DiMD2xtl.js";const i={};function l(p,s){return t(),a("div",null,s[0]||(s[0]=[e(`<h4 id="rename-filter-fields" tabindex="-1"><a class="header-anchor" href="#rename-filter-fields"><span>Rename Filter Fields</span></a></h4><p>To rename filter fields, you can add a value to fields defined in <code>$renamedFilterFields</code>. This is useful when you want to use a different name for a field in the client-side, while keeping the actual database column name intact.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre class="language-php"><code><span class="line"><span class="token comment">// App\\Models\\User</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Example URL: ?filter[phone][$eq]=0000000000</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// The $renamedFilterFields property is used to map the client-side field names to the actual database column names.</span></span>
<span class="line"><span class="token keyword">protected</span> <span class="token variable">$renamedFilterFields</span> <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">  <span class="token string single-quoted-string">&#39;mobile&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;phone&#39;</span><span class="token punctuation">,</span> <span class="token comment">// The actual database column is &#39;mobile&#39;, but the client should use &#39;phone&#39;.</span></span>
<span class="line">  <span class="token string single-quoted-string">&#39;posts&#39;</span>  <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;writing&#39;</span><span class="token punctuation">,</span> <span class="token comment">// The actual relation is &#39;posts&#39;, but the client should use &#39;writing&#39;.</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this case, the client should send <code>phone</code> to filter by the mobile column in the database.</p><h4 id="rename-sort-fields" tabindex="-1"><a class="header-anchor" href="#rename-sort-fields"><span>Rename Sort Fields</span></a></h4><p>To rename sort fields, you can add a value to the defined key in <code>$sortFields</code>. This is similar to renaming filter fields, but applies to sorting operations.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre class="language-php"><code><span class="line"><span class="token comment">// App\\Models\\User</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Example URL: ?sort=phone</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// The $sortFields property is used to map the client-side field names to the actual database column names for sorting.</span></span>
<span class="line"><span class="token keyword">protected</span> <span class="token variable">$sortFields</span> <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">  <span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string single-quoted-string">&#39;mobile&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;phone&#39;</span><span class="token punctuation">,</span> <span class="token comment">// The actual database column is &#39;mobile&#39;, but the client should use &#39;phone&#39; for sorting.</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this case, the client should send <code>phone</code> to sort by the mobile column in the database.</p><h4 id="overwrite-renamed-fields" tabindex="-1"><a class="header-anchor" href="#overwrite-renamed-fields"><span>Overwrite Renamed Fields</span></a></h4><p>Overwrite Renamed Fields To overwrite renamed fields in the controller; you can pass renamed fields to <code>rebamedFilterFields</code> and <code>sortFields</code>.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre class="language-php"><code><span class="line"><span class="token comment">// Overwriting the renamed filter fields in the controller.</span></span>
<span class="line"><span class="token class-name static-context">Post</span><span class="token operator">::</span><span class="token function">renamedFilterFields</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;created_at&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;published_date&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Overwriting the sort fields in the controller.</span></span>
<span class="line"><span class="token class-name static-context">Post</span><span class="token operator">::</span><span class="token function">sortFields</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="line">    <span class="token string single-quoted-string">&#39;created_at&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;published_date&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string single-quoted-string">&#39;updated_at&#39;</span></span>
<span class="line">  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Note that <code>sortFields</code> and <code>renamedFilterFields</code> will overwrite fields defined in the model.</p></div>`,12)]))}const c=n(i,[["render",l],["__file","rename.html.vue"]]),d=JSON.parse('{"path":"/advanced/rename.html","title":"Rename Fields","lang":"en-US","frontmatter":{"title":"Rename Fields","prev":{"text":"Available Methods","link":"/js-examples/available-methods"},"next":{"text":"Relation Fields","link":"/advanced/relation"}},"headers":[],"git":{"updatedTime":1718398054000,"contributors":[{"name":"Abbas mkhzomi","email":"amkhzomi@gmail.com","commits":4}]},"filePathRelative":"advanced/rename.md"}');export{c as comp,d as data};
