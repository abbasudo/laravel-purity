import{_ as n,c as a,b as e,o as t}from"./app-DiMD2xtl.js";const l={};function p(i,s){return t(),a("div",null,s[0]||(s[0]=[e(`<h3 id="allowed-fields" tabindex="-1"><a class="header-anchor" href="#allowed-fields"><span>Allowed Fields</span></a></h3><p>By default, Purity allows every database column and all model relations (that have a defined return type) to be filtered.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre class="language-php"><code><span class="line"><span class="token comment">// App\\Models\\User</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">posts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name class-name-fully-qualified return-type">Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Eloquent<span class="token punctuation">\\</span>Relations<span class="token punctuation">\\</span>HasMany</span> <span class="token comment">// This is mandatory</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">hasMany</span><span class="token punctuation">(</span><span class="token class-name static-context">Post</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>you can overwrite the allowed columns as follows:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre class="language-php"><code><span class="line"><span class="token comment">// App\\Models\\User</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">protected</span> <span class="token variable">$filterFields</span> <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">  <span class="token string single-quoted-string">&#39;email&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string single-quoted-string">&#39;mobile&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string single-quoted-string">&#39;posts&#39;</span><span class="token punctuation">,</span> <span class="token comment">// relation</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line"><span class="token keyword">protected</span> <span class="token variable">$sortFields</span> <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">  <span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string single-quoted-string">&#39;mobile&#39;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>any field other than email, mobile, or posts will be rejected when filtering.</p><h4 id="overwrite-allowed-fields" tabindex="-1"><a class="header-anchor" href="#overwrite-allowed-fields"><span>Overwrite Allowed Fields</span></a></h4><p>to overwrite allowed fields in the controller add <code>filterFields</code> or <code>sortFields</code> before calling filter or sort method.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre class="language-php"><code><span class="line"><span class="token class-name static-context">Post</span><span class="token operator">::</span><span class="token function">filterFields</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;title&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;created_at&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name static-context">Post</span><span class="token operator">::</span><span class="token function">sortFields</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;created_at&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;updated_at&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>filterFields and sortFields will overwrite fields defined in the model.</p></div>`,10)]))}const c=n(l,[["render",p],["__file","allowed.html.vue"]]),d=JSON.parse('{"path":"/advanced/allowed.html","title":"Allowed Fields","lang":"en-US","frontmatter":{"title":"Allowed Fields","description":"Learn how to filter data in Laravel Purity.","prev":{"text":"Relation Fields","link":"/advanced/relation"},"next":{"text":"Livewire","link":"/advanced/livewire"}},"headers":[{"level":3,"title":"Allowed Fields","slug":"allowed-fields","link":"#allowed-fields","children":[]}],"git":{"updatedTime":1718412827000,"contributors":[{"name":"Abbas mkhzomi","email":"amkhzomi@gmail.com","commits":4}]},"filePathRelative":"advanced/allowed.md"}');export{c as comp,d as data};
